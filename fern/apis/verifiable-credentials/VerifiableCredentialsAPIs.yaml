openapi: 3.0.1
servers:
    - url: "https://staging.crossmint.com/api"
      description: "Staging environment (testnets)"
    - url: "https://www.crossmint.com/api"
      description: "Production environment (mainnets)"
security:
    - apiKey: []
info:
    description: N/A
    version: 1.0.0
    title: Verifiable Credentials
    contact:
        name: Crossmint Verifiable Credentials APIs
        url: https://www.crossmint.com
        email: support@crossmint.io

paths:
    "/unstable/credentials/verify":
        # VERIFY CREDENTIAL
        post:
            summary: Verify Credential
            description: |
                Verify that a credential is valid.

                **API scope required** `credentials.read`
            operationId: verify-credential
            tags:
                - Verifiable Credentials
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            additionalProperties: false
                            properties:
                                credential:
                                    description: The JSON representing a credential.
                                    type: object
                            required:
                                - credential
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    isValid:
                                        type: boolean
                                        example: true/false
                                    error:
                                        type: string
                                        nullable: true
                                        example: null / "error message"
                            examples:
                                valid:
                                    description: Valid credential
                                    value:
                                        isValid: true
                                        error: null
                                invalid revoked:
                                    description: Revoked credential
                                    value:
                                        isValid: false
                                        error: Credential Revoked
                                invalid expired:
                                    description: Credential expired
                                    value:
                                        isValid: false
                                        error: Credential expired at <date>
                                invalid proof:
                                    description: Invalid proof
                                    value:
                                        isValid: false
                                        error: Invalid proof
                400:
                    description: "Bad Request"

    "/unstable/credentials/templates/":
        # CREATE VC COLLECTION
        post:
            summary: Create VC template
            description: |
                Create a template (similar to an nft collection) for issuing verifiable credentials.

                **API scope required** `credentials:template.create`
            operationId: vc-create-template
            tags:
                - Verifiable Credentials
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                metadata:
                                    type: object
                                    additionalProperties: false
                                    required:
                                        - name
                                        - image
                                        - description
                                    properties:
                                        name:
                                            type: string
                                            description: "The name of your collection (Max length: 32)"
                                            example: Verifiable Credential
                                            maxLength: 32
                                        description:
                                            type: string
                                            description: "A brief description of credential (Max length: 64)"
                                            example: The owner of this credential is authorized.
                                            maxLength: 64
                                chain:
                                    description: The chain to mint the nft on
                                    type: string
                                    enum:
                                        - polygon
                                credentials:
                                    description: Credentials parameters
                                    type: object
                                    properties:
                                        type:
                                            type: string
                                            description: The type of credentials inside the collection (blank or 'default' in case no custom type is used)
                                            example: degreeForMastersStudent
                                        storage:
                                            type: string
                                            description: Where to store the credential
                                            default: crossmint | decentralized-ipfs | delegated
                                            example: crossmint | decentralized-ipfs | delegated
                                        delegatedStorageEndpoint:
                                            type: string
                                            description: Only if storage is 'delegated', the endpoint to retrieve the credential from
                                            example: undefined
                                        encryption:
                                            type: string
                                            description: Whether to encrypt the credential using the recipient's wallet
                                            default: none | decentralized-lit
                                            example: none | decentralized-lit
                                        delegatedIssuer:
                                            type: object
                                            description: Issuer information, fill only if using delegatedStorage
                                            default: undefined
                                            example: undefined
                                            properties:
                                                did:
                                                    type: string
                                                    description: The issuer's did
                                                    example: did:polygon:0x123456789
                                                endpoint:
                                                    type: string
                                                    description: The issuer's endpoint to sign credentials
                                                    example: https://issuer.com/sign
                                                token:
                                                    type: string
                                                    description: Token used for auth on the issuer endpoint
                                                    example: "abcd"
                                    required:
                                        - type
                            required:
                                - metadata
                                - chain
                                - credentials
            responses:
                200:
                    description: Success. Refer to the standard create collection response for more details.
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Success. Refer to the standard nft create collection response for more details.
                400:
                    description: Bad Request
                    content:
                        error:
                            examples:
                                InvalidCustomType:
                                    description: Invalid Custom type
                                ChainNotSupported:
                                    description: Chain not supported
                                SFTsNotSupported:
                                    description: SFTs not supported
                                CredentialsNotSupported:
                                    description: Credentials not supported on this project

    "/unstable/collections/{collectionId}/nfts/{id}/credentials":
        get:
            # GET VC BY NFT ID
            summary: Get VC by NFT ID
            description: |
                Get a verifiable credential by the ID associated with the minted NFT.

                This ID will have the format: `<UUID>`. For example: `d7eb777b-e9b4-4f34-ab5f-ce199111166a`

                **API scope required** `credentials.read`. This endpoint will not work with a client side API key.
            operationId: get-vc
            tags:
                - Verifiable Credentials
            parameters:
                - name: collectionId
                  in: path
                  description: Collection id (template id)
                  required: true
                  schema: { type: string }
                - name: id
                  in: path
                  description: |
                      UUID of the NFT returned in the NFT creation response. Format is: `<UUID>`
                  required: true
                  schema: { type: string }
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                type: object
                                description: The credential object
                            example:
                                $ref: "#/components/examples/Credential"
                400:
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                type: object
                            example:
                                error: Credential not issued yet, wait for the mint to complete.
                404:
                    description: NFT not found

    "/unstable/credentials/{id}":
        # GET VC BY ID
        get:
            summary: Get VC by Credential ID
            description: |
                Get a verifiable credential by the ID associated with it. 

                This ID will have the format: `urn:uuid:<UUID>`. For example: `urn:uuid:64f9877d-a19a-4205-8d61-f8c2abed5766`

                **API scope required** `credentials.read`. This enpoint will work also with a client side API key.
            operationId: get-vc-by-id
            tags:
                - Verifiable Credentials
            parameters:
                - name: id
                  in: path
                  description: |
                      Unique ID of the credential as returned in the NFT creation response. Format is: `urn:uuid:<UUID>`
                  required: true
                  schema: { type: string }
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                type: object
                                description: The credential object
                            example:
                                $ref: "#/components/examples/Credential"
                400:
                    description: Bad Request
                    content:
                        error:
                            examples:
                                NotIssuedYet:
                                    description: Credential not issued yet, wait for the mint to complete.
                404:
                    description: Credential not found

        # Revoke credential
        delete:
            summary: Revoke credential by id
            description: |
                Revoke a verifiable credential by the credential ID. 
                This involves burning the associated nft.

                This ID will have the format: `urn:uuid:<UUID>`. For example: `urn:uuid:64f9877d-a19a-4205-8d61-f8c2abed5766`

                **API scope required** `credentials.create`.
            operationId: revoke-credential
            tags:
                - Verifiable Credentials
            parameters:
                - name: id
                  in: path
                  description: |
                      Unique ID of the credential as returned in the NFT creation response. Format is: `urn:uuid:<UUID>`
                  required: true
                  schema: { type: string }
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BurnNFTResponse"
                403:
                    description: Forbidden
                404:
                    description: Credential not found
                503:
                    description: Please try again in a few minutes. If the issue still persists, contact Crossmint support.

    "/unstable/nfts/{nftLocator}/credentials":
        get:
            summary: Get VC by NFT Locator
            description: |
                Get a verifiable credential by the NFT locator. 

                This locator will have the format: `<chain>:<contract_address>:<tokenId>`. 
                For example: `polygon:0x1234abcde...:1`

                **API scope required** `credentials.read`. This enpoint will work also with a client side API key.
            operationId: get-vc-by-locator
            tags:
                - Verifiable Credentials
            parameters:
                - name: nftLocator
                  in: path
                  description: NFT on chain locator, in the format of `<chain>:<contract_address>:<tokenId>`
                  required: true
                  schema: { type: string }
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                type: object
                                description: The credential object
                            example:
                                $ref: "#/components/examples/Credential"
                400:
                    description: Bad Request
                    content:
                        error:
                            examples:
                                NotIssuedYet:
                                    description: Credential not issued yet, wait for the mint to complete.
                404:
                    description: Nft not found

    "/unstable/credentials/templates/{templateId}/vcs":
        # ISSUE VC
        post:
            summary: Issue VC
            description: |
                Issue a verifiable credential. Deliver to a web3 wallet or email address.

                **API scope required** `credentials.create`
            operationId: issue-vc
            tags:
                - Verifiable Credentials
            parameters:
                - name: templateId
                  in: path
                  description: Template id of a credential enabled collection
                  required: true
                  example: default
                  schema: { type: string }
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            additionalProperties: false
                            properties:
                                recipient:
                                    type: string
                                    example: polygon:0x1234abcde... or email:<email_address>:polygon
                                    description: Recipient address in the format of `<chain>:<address>` or  `email:<email_address>:<chain>`.
                                metadata:
                                    type: object
                                    additionalProperties: false
                                    required:
                                        - name
                                        - image
                                        - description
                                    properties:
                                        name:
                                            type: string
                                            description: "The name of your NFT (Max length: 32)"
                                            example: Crossmint Example NFT
                                            maxLength: 32
                                        image:
                                            type: string
                                            description: Direct link to your NFT image
                                            example: https://www.crossmint.com/assets/crossmint/logo.png
                                        description:
                                            type: string
                                            description: "A brief description of the NFT (Max length: 64)"
                                            example: My NFT created via the mint API!
                                            maxLength: 64
                                        animation_url:
                                            type: string
                                            example: ""
                                            description: |
                                                **EVM only**

                                                [See more info here](/minting/advanced/nft-metadata)
                                        attributes:
                                            type: array
                                            description: "Add attributes to your NFT"
                                            items:
                                                type: object
                                                required:
                                                    - trait_type
                                                    - value
                                                properties:
                                                    display_type:
                                                        type: string
                                                        description: Display name of your attribute
                                                        enum:
                                                            - boost_number
                                                            - boost_percentage
                                                            - number
                                                    trait_type:
                                                        type: string
                                                        description: The name of the trait
                                                    value:
                                                        type: string
                                                        description: The value of the trait
                                credential:
                                    type: object
                                    additionalProperties: false
                                    properties:
                                        subject:
                                            type: object
                                            description: The credential claims object, matching the schema defined on the collection types.
                                            example:
                                                subjectName: foo
                                                subjectAge: 20
                                                claim: "bar"
                                        expiresAt:
                                            type: string
                                            description: optional expiration date in  ISO 8601
                                            default: "2023-08-31T16:34:33.854Z"
                                    required: ["subject"]
                            required: ["recipient", "credential"]
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                title: "Credential creation Response"
                                type: object
                                properties:
                                    credentialId:
                                        type: string
                                        description: The credential id
                                        example: urn:uuid:credentialId
                                    id:
                                        type: string
                                    onChain:
                                        type: object
                                        properties:
                                            status:
                                                type: string
                                            chain:
                                                type: string
                                            contractAddress:
                                                type: string
                            examples:
                                Pending:
                                    description: EVM pending
                                    value:
                                        credentialId: urn:uuid:40ada19e-3b4a-4de0-8d61-e0e7aedbfa0
                                        nft:
                                            onChain:
                                                status: pending
                                                chain: ethereum
                                                contractAddress: "0x123456789"
                                        id: 1938b38c-3037-45dc-8033-333b7ebaee7
                400:
                    description: Bad Request
                    content:
                        application/json:
                            examples:
                                InvalidArguments:
                                    description: Invalid arguments, please make sure you're following the api specification.
                                CollectionUsupported:
                                    description: Collection does not support credentials
                                ProjectUnsupported:
                                    description: Project does not support credentials
                                InvalidSchema:
                                    description: The provided subject schema does not match the collection type
                                InvalidDate:
                                    description: Invalid expiration date format or date in the past
                403:
                    description: Forbidden error, please ensure the credentials are correct.
                503:
                    description: Please try again in a few minutes. If the issue still persists, please contact Crossmint support.

    "/unstable/credentials/types":
        post:
            summary: Create VC Type
            description: |
                Create a type with a random UUID. This is how you define a custom schema.

                **API scope required** `credentials.create`
            operationId: create-type
            tags:
                - Verifiable Credentials
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            additionalProperties: false
                            properties:
                                credentialSubjectSchema:
                                    type: array
                                    items:
                                        properties:
                                            name:
                                                type: string
                                                description: The name of credential subject property
                                                default: user_email
                                            type:
                                                type: "string"
                                                description: The type of credential subject property
                                                default: basetype or nestedTypeSchema
                                        required:
                                            - type
                                            - name
                                nestedTypeSchema:
                                    type: array
                                    items:
                                        properties:
                                            name:
                                                type: string
                                                default: age
                                            type:
                                                type: string
                                                default: uint16
                                        required:
                                            - type
                                            - name
                            example:
                                {
                                    "credentialSubjectSchema":
                                        [
                                            { "name": "username", "type": "string" },
                                            { "name": "courses_completed", "type": "uint64" },
                                            { "name": "courses", "type": "Course[]" },
                                        ],
                                    "Course":
                                        [
                                            { "name": "name", "type": "string" },
                                            { "name": "grades", "type": "uint64[]" },
                                            { "name": "class", "type": "Class" },
                                        ],
                                    "Class":
                                        [{ "name": "name", "type": "string" }, { "name": "teacher", "type": "string" }],
                                }
                            required:
                                - credentialSubjectSchema
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The type name
                                        example: 64f0c05641a512c86786fd3b
                400:
                    description: "Bad Request"
                    content:
                        error:
                            examples:
                                Recursion:
                                    description: The type schema is recursive
                                UnusedDeclaration:
                                    description: The type schema has unused declarations
                                UndefinedType:
                                    description: The type schema references an undefined type
                                BaseTypeOverridden:
                                    description: The type schema overrides a base type
                                MissingCredentialSubjectSchema:
                                    description: The type schema is missing a credential subject schema

    "/unstable/credentials/types/{typeName}":
        put:
            summary: Create VC Type with name
            description: |
                Create a type with a given name. This is how you define a custom schema.

                **API scope required** `credentials.create`
            operationId: create-type-idempotent
            parameters:
                - name: typeName
                  in: path
                  description: The name of the type
                  required: true
                  schema:
                      type: string
            tags:
                - Verifiable Credentials
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            additionalProperties: false
                            properties:
                                credentialSubjectSchema:
                                    type: array
                                    items:
                                        properties:
                                            name:
                                                type: string
                                                description: The name of credential subject property
                                                default: user_email
                                            type:
                                                type: "string"
                                                description: The type of credential subject property
                                                default: basetype or nestedTypeSchema
                                        required:
                                            - type
                                            - name
                                nestedTypeSchema:
                                    type: array
                                    items:
                                        properties:
                                            name:
                                                type: string
                                                default: age
                                            type:
                                                type: string
                                                default: uint16
                                        required:
                                            - type
                                            - name
                            example:
                                {
                                    "credentialSubjectSchema":
                                        [
                                            { "name": "username", "type": "string" },
                                            { "name": "courses_completed", "type": "uint64" },
                                            { "name": "courses", "type": "Course[]" },
                                        ],
                                    "Course":
                                        [
                                            { "name": "name", "type": "string" },
                                            { "name": "grades", "type": "uint64[]" },
                                            { "name": "class", "type": "Class" },
                                        ],
                                    "Class":
                                        [{ "name": "name", "type": "string" }, { "name": "teacher", "type": "string" }],
                                }
                            required:
                                - credentialSubjectSchema
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: string
                                        description: The type name
                                        example: 64f0c05641a512c86786fd3b
                400:
                    description: "Bad Request"
                    content:
                        error:
                            examples:
                                Recursion:
                                    description: The type schema is recursive
                                UnusedDeclaration:
                                    description: The type schema has unused declarations
                                UndefinedType:
                                    description: The type schema references an undefined type
                                BaseTypeOverridden:
                                    description: The type schema overrides a base type
                                MissingCredentialSubjectSchema:
                                    description: The type schema is missing a credential subject schema
                                AlreadyDefined:
                                    description: A type with the given name already exists.

        get:
            summary: Get a Type
            description: |
                Get the schema of a given type by name
                        
                **API scope required** `credentials.read`
            operationId: get-type
            tags:
                - Verifiable Credentials
            parameters:
                - name: typeName
                  in: path
                  description: The name of the type
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: Success.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    name:
                                        type: string
                                        example: "64f0c05641a512c86786fd3b"
                                    credentialSubjectSchema:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                name:
                                                    type: string
                                                type:
                                                    type: string
                                        example:
                                            - name: "age"
                                              type: "uint8"
                                            - name: "name"
                                              type: "string"
                400:
                    description: "Type not found"

components:
    securitySchemes:
        apiKey:
            type: apiKey
            in: header
            name: X-API-KEY
            description: Obtained in the Crossmint developer console

    schemas:
        BurnNFTResponse:
            type: object
            properties:
                actionId:
                    type: string
                    description: |
                        Can be used to check the status via the [action status API](/api-reference/common/get-action-status)
                    example: "201520fc-e0eb-4698-a2f3-c6b50cc7c894"
                action:
                    type: string
                    description: The action performed, in this case `nfts.delete`
                    example: "nfts.delete"
                status:
                    type: string
                    description: Current status of the async operation. One of `pending` or `succeeded`
                    example: "pending OR succeeded"
                data:
                    type: object
                    properties:
                        chain:
                            type: string
                            description: Refer to the [supported chains](/introduction/supported-chains) page for more info
                            example: "polygon"
                        txId:
                            type: string
                            description: |
                                The onchain transaction ID related to the request. 

                                This is only present when `status` is `succeeded`
                            example: "succeeded status ONLY - 0x69cf6d971e6745f25f683db9c87663839be02bdaa4a70f0724f490d7335b0081"
                        collection:
                            type: object
                            properties:
                                id:
                                    type: string
                                    description: The Crossmint identifier for the collection. Either a UUID or custom string depending on how you create the collection.
                                    example: "default-polygon"
                                contractAddress:
                                    type: string
                                    description: The on-chain contract address for the given collection.
                                    example: "0x67a602CBb306b3DBaaC7ECf55b72EED0E04Dc785"
                        token:
                            type: object
                            properties:
                                id:
                                    type: string
                                    description: The Crossmint identifier for the NFT. This will be a UUID.
                                    example: "799a6f68-e2ea-4126-8577-4298dfcf900c"
                                tokenId:
                                    type: string
                                    description: The numeric tokenId of the NFT in the contract.
                                    example: "7"
                startedAt:
                    type: string
                    format: date-time
                    description: The time this operation was initiated in UTC.
                    example: "2024-01-10T23:01:45.000Z"
                completedAt:
                    type: string
                    format: date-time
                    description: |
                        The time this operation completed in UTC.

                        This is only present when `status` is `succeeded`
                    example: "succeeded status ONLY - 2024-01-10T23:02:00.000Z"
                resource:
                    type: string
                    description: The URL path to obtain current status with [action status api](/api-reference/common/get-action-status)
                    example: "https://staging.crossmint.com/api/2022-06-09/collections/default-polygon/nfts/201520fc-e0eb-4698-a2f3-c6b50cc7c894"

    examples:
        Credential:
            value:
                id: <CREDENTIAL_ID>
                credentialSubject:
                    id: 0xSUBJECT_ADDRESS
                    ...additional fields: ...
                nft:
                    tokenId: <tokenId>
                    chain: polygon
                    contractAddress: <collection_contract_address>
                expirationDate: "2234-12-12"
                "@context":
                    - https://www.w3.org/2018/credentials/v1
                    - https://github.com/haardikk21/ethereum-eip712-signature-2021-spec/blob/main/index.html
                issuer:
                    id: did:0xISSUER_ADDRESS
                type:
                    - VerifiableCredential
                    - 64f0c05641a512c86786fd3b
                issuanceDate: "2023-08-31T16:34:33.854Z"
                proof:
                    proofValue: "ProofValue"
                    ...additional required fields: ...
